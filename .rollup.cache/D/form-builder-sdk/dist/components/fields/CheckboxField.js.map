{"version":3,"file":"CheckboxField.js","sourceRoot":"","sources":["../../../src/components/fields/CheckboxField.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,KAAK,QAAQ,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAE,EAAE,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAEpD,MAAM,UAAU,aAAa,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAkB;IACxF,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACzD,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEzD,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAA;IAGpC,MAAM,eAAe,GAAG,GAAG,EAAE;QAC3B,IAAI,KAAK,CAAC,KAAK;YAAE,OAAO,KAAK,CAAC,KAAK,CAAC;QACpC,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB;YAAE,OAAO,4BAA4B,CAAC;QAC1E,IAAI,KAAK,CAAC,IAAI,KAAK,eAAe;YAAE,OAAO,uBAAuB,CAAC;QACnE,OAAO,KAAK,CAAC,WAAW,IAAI,iBAAiB,CAAC;IAChD,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAE,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;QACxC,6BAAK,SAAS,EAAC,6BAA6B,EAAC,KAAK,EAAE,WAAW;YAC7D,oBAAC,QAAQ,CAAC,IAAI,IACZ,EAAE,EAAE,KAAK,CAAC,EAAE,EACZ,OAAO,EAAE,KAAK,IAAI,KAAK,EACvB,eAAe,EAAE,QAAQ,EACzB,SAAS,EAAE,EAAE,CACX,gIAAgI,EAChI,KAAK,IAAI,oBAAoB,CAC9B,EACD,KAAK,EAAE;oBACL,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,IAAI,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,eAAe,IAAI,SAAS;oBACxG,WAAW,EAAE,WAAW,CAAC,WAAW,IAAI,SAAS;oBACjD,WAAW,EAAE,WAAW,CAAC,WAAW,IAAI,KAAK;oBAC7C,YAAY,EAAE,WAAW,CAAC,YAAY,IAAI,KAAK;oBAC/C,WAAW,EAAE,OAAO;oBACpB,QAAQ,EAAE,MAAM;oBAChB,SAAS,EAAE,MAAM;iBAClB;gBAED,oBAAC,QAAQ,CAAC,SAAS,IAAC,SAAS,EAAC,YAAY;oBACxC,oBAAC,SAAS,IAAC,SAAS,EAAC,SAAS,GAAG,CACd,CACP;YAEhB,+BACE,OAAO,EAAE,KAAK,CAAC,EAAE,EACjB,SAAS,EAAC,mCAAmC,EAC7C,KAAK,kCACA,WAAW,KACd,QAAQ,EAAE,WAAW,CAAC,QAAQ,IAAI,MAAM,EACxC,KAAK,EAAE,WAAW,CAAC,KAAK,IAAI,SAAS;gBAGtC,eAAe,EAAE;gBACjB,KAAK,CAAC,QAAQ,IAAI,8BAAM,SAAS,EAAC,mBAAmB,QAAS,CACzD,CACJ;QAEL,KAAK,IAAI,CACR,2BAAG,SAAS,EAAC,2BAA2B,IAAE,KAAK,CAAK,CACrD,CACG,CACP,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport React from \"react\";\nimport * as Checkbox from \"@radix-ui/react-checkbox\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { FormFieldProps } from \"@/lib/types\";\nimport { cn, applyInlineStyles } from \"@/lib/utils\";\n\nexport function CheckboxField({ field, value, onChange, error, className }: FormFieldProps) {\n  const labelStyles = applyInlineStyles(field.style.label);\n  const inputStyles = applyInlineStyles(field.style.input);\n\n  console.log(inputStyles, 'checkbox')\n\n  // Dynamic checkbox text based on field name\n  const getCheckboxText = () => {\n    if (field.label) return field.label;\n    if (field.name === 'is_scene_member') return 'Are you a Scene+ â„¢ member?';\n    if (field.name === 'is_contractor') return 'Are you a contractor?';\n    return field.placeholder || 'Checkbox option';\n  };\n\n  return (\n    <div className={cn(\"space-y-1\", className)}>\n      <div className=\"flex items-center space-x-3\" style={inputStyles}>\n        <Checkbox.Root\n          id={field.id}\n          checked={value || false}\n          onCheckedChange={onChange}\n          className={cn(\n            \"flex h-5 w-5 items-center justify-center flex-shrink-0 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\",\n            error && \"focus:ring-red-500\"\n          )}\n          style={{\n            backgroundColor: value ? inputStyles.borderColor || '#374151' : inputStyles.backgroundColor || '#ffffff',\n            borderColor: inputStyles.borderColor || '#374151',\n            borderWidth: inputStyles.borderWidth || '2px',\n            borderRadius: inputStyles.borderRadius || '4px',\n            borderStyle: 'solid',\n            minWidth: '20px',\n            minHeight: '20px'\n          }}\n        >\n          <Checkbox.Indicator className=\"text-white\">\n            <CheckIcon className=\"h-4 w-4\" />\n          </Checkbox.Indicator>\n        </Checkbox.Root>\n        \n        <label \n          htmlFor={field.id}\n          className=\"cursor-pointer flex-1 select-none\"\n          style={{\n            ...labelStyles,\n            fontSize: labelStyles.fontSize || '14px',\n            color: labelStyles.color || '#111827'\n          }}\n        >\n          {getCheckboxText()}\n          {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n      </div>\n      \n      {error && (\n        <p className=\"text-sm text-red-500 mt-1\">{error}</p>\n      )}\n    </div>\n  );\n}\n"]}