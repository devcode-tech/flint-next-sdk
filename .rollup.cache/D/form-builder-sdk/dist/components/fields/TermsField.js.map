{"version":3,"file":"TermsField.js","sourceRoot":"","sources":["../../../src/components/fields/TermsField.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use client\";\n\nimport React from \"react\";\nimport * as Checkbox from \"@radix-ui/react-checkbox\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { FormFieldProps } from \"@/lib/types\";\nimport { cn, applyInlineStyles } from \"@/lib/utils\";\n\nexport function TermsField({ field, value, onChange, error, className }: FormFieldProps) {\n  const labelStyles = applyInlineStyles(field.style.label);\n\n  // Parse content with links\n  const parseContentWithLinks = (content: string, links: typeof field.links) => {\n    if (!links || links.length === 0) {\n      return <span>{content}</span>;\n    }\n\n    let parsedContent = content;\n    const elements: (string | React.ReactElement)[] = [];\n    let lastIndex = 0;\n\n    links.forEach((link, index) => {\n      const linkIndex = parsedContent.indexOf(link.text, lastIndex);\n      if (linkIndex !== -1) {\n        // Add text before link\n        if (linkIndex > lastIndex) {\n          elements.push(parsedContent.substring(lastIndex, linkIndex));\n        }\n        \n        // Add link element\n        elements.push(\n          <a\n            key={link.id}\n            href={link.url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-blue-600 hover:text-blue-800 underline\"\n          >\n            {link.text}\n          </a>\n        );\n        \n        lastIndex = linkIndex + link.text.length;\n      }\n    });\n\n    // Add remaining text\n    if (lastIndex < parsedContent.length) {\n      elements.push(parsedContent.substring(lastIndex));\n    }\n\n    return elements;\n  };\n\n  if (field.mode === \"text\") {\n    // Text-only terms (no interaction required)\n    return (\n      <div className={cn(\"space-y-2\", className)}>\n        <div \n          className=\"text-sm text-gray-700\"\n          style={labelStyles}\n        >\n          {parseContentWithLinks(field.content || \"\", field.links)}\n        </div>\n      </div>\n    );\n  }\n\n  // Checkbox mode (requires user agreement)\n  return (\n    <div className={cn(\"space-y-1\", className)}>\n      <div className=\"flex items-start space-x-3\">\n        <Checkbox.Root\n          id={field.id}\n          checked={value || false}\n          onCheckedChange={onChange}\n          className={cn(\n            \"flex h-5 w-5 items-center justify-center flex-shrink-0 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 mt-0.5\",\n            error && \"focus:ring-red-500\"\n          )}\n          style={{\n            backgroundColor: value ? '#374151' : '#ffffff',\n            borderColor: '#374151',\n            borderWidth: '2px',\n            borderRadius: '4px',\n            borderStyle: 'solid',\n            minWidth: '20px',\n            minHeight: '20px'\n          }}\n        >\n          <Checkbox.Indicator className=\"text-white\">\n            <CheckIcon className=\"h-4 w-4\" />\n          </Checkbox.Indicator>\n        </Checkbox.Root>\n        \n        <label \n          htmlFor={field.id}\n          className=\"cursor-pointer flex-1 select-none text-sm leading-relaxed\"\n          style={{\n            fontSize: '14px',\n            color: '#111827',\n            lineHeight: '1.6'\n          }}\n        >\n          {parseContentWithLinks(field.content || \"\", field.links)}\n          {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n      </div>\n      \n      {error && (\n        <p className=\"text-sm text-red-500 mt-1\">{error}</p>\n      )}\n    </div>\n  );\n}\n"]}