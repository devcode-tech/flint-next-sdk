{"version":3,"file":"PostalField.js","sourceRoot":"","sources":["../../../src/components/fields/PostalField.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,EAAE,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAEpD,MAAM,UAAU,WAAW,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAkB;IAC9F,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACzD,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEzD,MAAM,iBAAiB,GAAG,CAAC,CAAsC,EAAE,EAAE;QACnE,IAAI,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QAG9C,IAAI,KAAK,CAAC,UAAU,CAAC,YAAY,KAAK,IAAI,EAAE,CAAC;YAE3C,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YAGlD,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC1B,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrE,CAAC;YAGD,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,CAAC;QAED,QAAQ,CAAC,UAAU,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAE,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;QACvC,KAAK,CAAC,KAAK,IAAI,CACd,+BACE,OAAO,EAAE,KAAK,CAAC,EAAE,EACjB,SAAS,EAAC,2BAA2B,EACrC,KAAK,EAAE,WAAW;YAEjB,KAAK,CAAC,KAAK;YACX,KAAK,CAAC,QAAQ,IAAI,8BAAM,SAAS,EAAC,mBAAmB,QAAS,CACzD,CACT;QACD,+BACE,EAAE,EAAE,KAAK,CAAC,EAAE,EACZ,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,IAAI,EAAC,MAAM,EACX,WAAW,EAAE,KAAK,CAAC,WAAW,EAC9B,KAAK,EAAE,KAAK,IAAI,EAAE,EAClB,QAAQ,EAAE,iBAAiB,EAC3B,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,KAAK,CAAC,UAAU,CAAC,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EACjE,SAAS,EAAE,EAAE,CACX,uDAAuD,EACvD,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,uCAAuC,CACnE,EACD,KAAK,EAAE,WAAW,GAClB;QACD,KAAK,CAAC,UAAU,CAAC,YAAY,KAAK,IAAI,IAAI,CACzC,2BAAG,SAAS,EAAC,4BAA4B,sBAAoB,CAC9D;QACA,KAAK,IAAI,CACR,2BAAG,SAAS,EAAC,2BAA2B,IAAE,KAAK,CAAK,CACrD,CACG,CACP,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport React from \"react\";\nimport { FormFieldProps } from \"@/lib/types\";\nimport { cn, applyInlineStyles } from \"@/lib/utils\";\n\nexport function PostalField({ field, value, onChange, onBlur, error, className }: FormFieldProps) {\n  const inputStyles = applyInlineStyles(field.style.input);\n  const labelStyles = applyInlineStyles(field.style.label);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let inputValue = e.target.value.toUpperCase();\n    \n    // Format Canadian postal code (A1A 1A1)\n    if (field.validation.postalFormat === \"CA\") {\n      // Remove spaces and non-alphanumeric characters\n      inputValue = inputValue.replace(/[^A-Z0-9]/g, \"\");\n      \n      // Add space after third character\n      if (inputValue.length > 3) {\n        inputValue = inputValue.slice(0, 3) + \" \" + inputValue.slice(3, 6);\n      }\n      \n      // Limit to 7 characters (including space)\n      inputValue = inputValue.slice(0, 7);\n    }\n    \n    onChange(inputValue);\n  };\n\n  return (\n    <div className={cn(\"space-y-1\", className)}>\n      {field.label && (\n        <label \n          htmlFor={field.id}\n          className=\"block text-sm font-medium\"\n          style={labelStyles}\n        >\n          {field.label}\n          {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n      )}\n      <input\n        id={field.id}\n        name={field.name}\n        type=\"text\"\n        placeholder={field.placeholder}\n        value={value || \"\"}\n        onChange={handleInputChange}\n        onBlur={onBlur}\n        maxLength={field.validation.postalFormat === \"CA\" ? 7 : undefined}\n        className={cn(\n          \"w-full border rounded focus:outline-none focus:ring-0\",\n          error ? \"border-red-500\" : \"border-gray-300 focus:border-blue-500\"\n        )}\n        style={inputStyles}\n      />\n      {field.validation.postalFormat === \"CA\" && (\n        <p className=\"text-xs text-gray-500 mt-1\">Format: A1A 1A1</p>\n      )}\n      {error && (\n        <p className=\"text-sm text-red-500 mt-1\">{error}</p>\n      )}\n    </div>\n  );\n}\n"]}