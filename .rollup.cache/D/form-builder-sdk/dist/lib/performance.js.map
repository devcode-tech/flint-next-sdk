{"version":3,"file":"performance.js","sourceRoot":"","sources":["../../src/lib/performance.ts"],"names":[],"mappings":"AAIA,MAAM,kBAAkB;IAAxB;QACU,YAAO,GAAwB,IAAI,GAAG,EAAE,CAAC;IAsDnD,CAAC;IApDC,KAAK,CAAC,KAAa;QACjB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;IAC7C,CAAC;IAED,GAAG,CAAC,KAAa;QACf,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAC/C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE3B,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;gBAC1C,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACtD,CAAC;YAED,OAAO,QAAQ,CAAC;QAClB,CAAC;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IAGD,eAAe;QACb,IAAI,OAAO,MAAM,KAAK,WAAW;YAAE,OAAO;QAG1C,MAAM,QAAQ,GAAG,IAAI,mBAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;YAChD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9C,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;QAG/D,MAAM,WAAW,GAAG,IAAI,mBAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;YACnD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;gBAC7B,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,WAAW,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAGrD,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,MAAM,WAAW,GAAG,IAAI,mBAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;YACnD,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;gBACtC,IAAI,CAAE,KAAa,CAAC,cAAc,EAAE,CAAC;oBACnC,QAAQ,IAAK,KAAa,CAAC,KAAK,CAAC;gBACnC,CAAC;YACH,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,WAAW,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IACxD,CAAC;CACF;AAED,MAAM,CAAC,MAAM,WAAW,GAAG,IAAI,kBAAkB,EAAE,CAAC","sourcesContent":["/**\r\n * Performance monitoring utilities\r\n */\r\n\r\nclass PerformanceMonitor {\r\n  private metrics: Map<string, number> = new Map();\r\n\r\n  start(label: string) {\r\n    this.metrics.set(label, performance.now());\r\n  }\r\n\r\n  end(label: string) {\r\n    const startTime = this.metrics.get(label);\r\n    if (startTime) {\r\n      const duration = performance.now() - startTime;\r\n      this.metrics.delete(label);\r\n      \r\n      if (process.env.NODE_ENV !== 'production') {\r\n        console.log(`âš¡ ${label}: ${duration.toFixed(2)}ms`);\r\n      }\r\n      \r\n      return duration;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // Report Core Web Vitals\r\n  reportWebVitals() {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    // Largest Contentful Paint (LCP)\r\n    const observer = new PerformanceObserver((list) => {\r\n      const entries = list.getEntries();\r\n      const lastEntry = entries[entries.length - 1];\r\n      console.log('LCP:', lastEntry.startTime);\r\n    });\r\n    observer.observe({ entryTypes: ['largest-contentful-paint'] });\r\n\r\n    // First Input Delay (FID)\r\n    const fidObserver = new PerformanceObserver((list) => {\r\n      const entries = list.getEntries();\r\n      entries.forEach((entry: any) => {\r\n        console.log('FID:', entry.processingStart - entry.startTime);\r\n      });\r\n    });\r\n    fidObserver.observe({ entryTypes: ['first-input'] });\r\n\r\n    // Cumulative Layout Shift (CLS)\r\n    let clsScore = 0;\r\n    const clsObserver = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        if (!(entry as any).hadRecentInput) {\r\n          clsScore += (entry as any).value;\r\n        }\r\n      }\r\n      console.log('CLS:', clsScore);\r\n    });\r\n    clsObserver.observe({ entryTypes: ['layout-shift'] });\r\n  }\r\n}\r\n\r\nexport const perfMonitor = new PerformanceMonitor();"]}