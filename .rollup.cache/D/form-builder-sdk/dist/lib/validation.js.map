{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/lib/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from \"zod\";\nimport { FormField, FormSchema } from \"@/lib/types\";\nimport { validateAge, validateCanadianPostalCode, isValidFileType } from \"@/lib/utils\";\n\nexport function createFieldValidation(field: FormField): z.ZodTypeAny {\n  let validation: any;\n\n  switch (field.type) {\n    case 'text':\n      if (field.required) {\n        const errorMessage = field.validation.requiredMessage || `${field.name} is required`;\n        validation = z.string({ required_error: errorMessage })\n          .min(1, { message: errorMessage });\n      } else {\n        validation = z.string().optional();\n      }\n      break;\n\n    case 'email':\n      if (field.required) {\n        const requiredMessage = field.validation.requiredMessage || 'Email is required';\n        const emailMessage = field.validation.emailMessage || 'Please enter a valid email address';\n        validation = z.string({ required_error: requiredMessage })\n          .min(1, { message: requiredMessage })\n          .email({ message: emailMessage });\n      } else {\n        validation = z.string().email(field.validation.emailMessage || 'Please enter a valid email address').optional();\n      }\n      break;\n\n    case 'date':\n      if (field.required) {\n        const errorMessage = field.validation.requiredMessage || 'Date is required';\n        validation = z.string({ required_error: errorMessage })\n          .min(1, { message: errorMessage });\n      } else {\n        validation = z.string().optional();\n      }\n      \n      // Add date format validation\n      if (field.validation.dateFormat) {\n        validation = validation.refine((date: string) => {\n          if (!date) return !field.required;\n          // Basic date format validation\n          const dateRegex = /^\\d{2}\\/\\d{2}\\/\\d{4}$/;\n          return dateRegex.test(date);\n        }, field.validation.dateFormatMessage || 'Please enter date in MM/DD/YYYY format');\n      }\n\n      // Add age validation\n      if (field.validation.minAge) {\n        validation = validation.refine((date: string) => {\n          if (!date) return !field.required;\n          return validateAge(date, field.validation.minAge!);\n        }, field.validation.minAgeMessage || `You must be at least ${field.validation.minAge} years old`);\n      }\n\n      // Add max date validation\n      if (field.validation.maxDate) {\n        validation = validation.refine((date: string) => {\n          if (!date) return !field.required;\n          const inputDate = new Date(date);\n          const maxDate = new Date(field.validation.maxDate!);\n          return inputDate <= maxDate;\n        }, 'Date cannot be in the future');\n      }\n      break;\n\n    case 'postal':\n      if (field.required) {\n        const errorMessage = field.validation.requiredMessage || 'Postal code is required';\n        validation = z.string({ required_error: errorMessage })\n          .min(1, { message: errorMessage });\n      } else {\n        validation = z.string().optional();\n      }\n      \n      if (field.validation.postalFormat === 'CA') {\n        validation = validation.refine((postal: string) => {\n          if (!postal) return !field.required;\n          return validateCanadianPostalCode(postal);\n        }, 'Please enter a valid Canadian postal code');\n      }\n      break;\n\n    case 'file':\n      validation = z.any();\n      \n      if (field.required) {\n        validation = validation.refine((file: File | FileList) => {\n          return file && (file instanceof File || file instanceof FileList);\n        }, field.validation.requiredMessage || 'File is required');\n      }\n\n      // File size validation\n      if (field.validation.maxFileSize) {\n        validation = validation.refine((file: File | FileList) => {\n          if (!file) return !field.required;\n          const fileObj = file instanceof FileList ? file[0] : file;\n          return fileObj.size <= (field.validation.maxFileSize! * 1024 * 1024);\n        }, field.validation.fileSizeMessage || `File size must be less than ${field.validation.maxFileSize}MB`);\n      }\n\n      // File type validation\n      if (field.validation.fileTypes && field.validation.fileTypes.length > 0) {\n        validation = validation.refine((file: File | FileList) => {\n          if (!file) return !field.required;\n          const fileObj = file instanceof FileList ? file[0] : file;\n          return isValidFileType(fileObj.name, field.validation.fileTypes!);\n        }, field.validation.fileTypeMessage || `Only ${field.validation.fileTypes?.join(', ')} files are allowed`);\n      }\n\n      if (!field.required) {\n        validation = validation.optional();\n      }\n      break;\n\n    case 'checkbox':\n      if (field.required) {\n        const errorMessage = field.validation.requiredMessage || 'This field is required';\n        validation = z.boolean({ required_error: errorMessage, invalid_type_error: errorMessage })\n          .refine((checked) => checked === true, errorMessage);\n      } else {\n        validation = z.boolean().optional().default(false);\n      }\n      break;\n\n    case 'dropdown':\n      if (field.required) {\n        const errorMessage = field.validation.requiredMessage || 'Please select an option';\n        validation = z.string({ required_error: errorMessage })\n          .min(1, { message: errorMessage });\n      } else {\n        validation = z.string().optional();\n      }\n      \n      // Validate against available options\n      if (field.options && field.options.length > 0) {\n        const validValues = field.options.map(option => option.value);\n        validation = validation.refine((value: string) => {\n          if (!value) return !field.required;\n          return validValues.includes(value);\n        }, 'Please select a valid option');\n      }\n      break;\n\n    case 'terms':\n      if (field.mode === 'checkbox') {\n        if (field.required) {\n          const errorMessage = field.validation.requiredMessage || 'You must accept the terms and conditions';\n          validation = z.boolean({ required_error: errorMessage, invalid_type_error: errorMessage })\n            .refine((accepted) => accepted === true, errorMessage);\n        } else {\n          validation = z.boolean().optional().default(false);\n        }\n      } else {\n        // Text mode terms don't require validation\n        validation = z.any().optional();\n      }\n      break;\n\n    default:\n      validation = z.string().optional();\n  }\n\n  return validation;\n}\n\nexport function createFormValidationSchema(schema: FormSchema): z.ZodSchema<any> {\n  const shape: Record<string, z.ZodTypeAny> = {};\n\n  schema.fields.forEach((field) => {\n    if (field.name && field.name.trim()) {\n      shape[field.name] = createFieldValidation(field);\n    }\n  });\n\n  return z.object(shape);\n}\n\nexport type FormValidationSchema = z.infer<ReturnType<typeof createFormValidationSchema>>;\n"]}